package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.UniqueAbility;

public class UniqueAbilityManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableUniqueAbility = "CREATE TABLE UniqueAbility(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), description varchar(200), PRIMARY KEY(id))";

	private PreparedStatement addPersonStmt;
	private PreparedStatement deleteAllPersonsStmt;
	private PreparedStatement getAllPersonsStmt;

	private Statement statement;

	public UniqueAbilityManager() {
		try {
			connection = DriverManager.getConnection("jdbc:hsqldb:file:/tmp/testdb;ifexists=false", "SA", "");
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTablePerson);

			addPersonStmt = connection
					.prepareStatement("INSERT INTO Person (name, yob) VALUES (?, ?)");
			deleteAllPersonsStmt = connection
					.prepareStatement("DELETE FROM Person");
			getAllPersonsStmt = connection
					.prepareStatement("SELECT id, name, yob FROM Person");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearPersons() {
		try {
			deleteAllPersonsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addPerson(UniqueAbility person) {
		int count = 0;
		try {
			addPersonStmt.setString(1, person.getName());
			addPersonStmt.setInt(2, person.getYob());

			count = addPersonStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<UniqueAbility> getAllPersons() {
		List<UniqueAbility> persons = new ArrayList<UniqueAbility>();

		try {
			ResultSet rs = getAllPersonsStmt.executeQuery();

			while (rs.next()) {
				UniqueAbility p = new UniqueAbility();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				persons.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return persons;
	}

}
