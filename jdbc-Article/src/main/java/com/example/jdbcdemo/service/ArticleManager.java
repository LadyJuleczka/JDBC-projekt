package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Article;
import com.example.jdbcdemo.domain.UniqueAbility;
import com.example.jdbcdemo.service.UniqueAbilityManager;

public class ArticleManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableUniqueAbility = "CREATE TABLE "
			+ "UniqueAbility(id bigint GENERATED BY DEFAULT AS IDENTITY, "
			+ "name varchar(20), description varchar(80), PRIMARY KEY(id))";

	private String createTableArticle = "CREATE TABLE "
			+ "Article(id bigint GENERATED BY DEFAULT AS IDENTITY, "
			+ "name varchar(20), dmg int, type varchar (20), uniqueAbility_id int, "
			+ "FOREIGN KEY (uniqueAbility_id) REFERENCES UniqueAbility(id) "
			+ "ON DELETE CASCADE ON UPDATE CASCADE)";

	private PreparedStatement addArticleStmt;
	private PreparedStatement deleteAllArticlesStmt;
	private PreparedStatement getAllArticlesStmt;
	private PreparedStatement editArticleStmt;
	private PreparedStatement deleteArticleStmt;
	
	private PreparedStatement addUniqueAbilityStmt;
	private PreparedStatement deleteAllUniqueAbilitiesStmt;
	private PreparedStatement getAllUniqueAbilitiesStmt;
	private PreparedStatement SelectId;

	private Statement statement;

	public ArticleManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs1 = connection.getMetaData().getTables(null, null,
					"UniqueAbility", null);
			if (!rs1.next()) {
				statement.executeUpdate(createTableUniqueAbility);
			}

			ResultSet rs2 = connection.getMetaData().getTables(null, null,
					"Article", null);

			if (!rs2.next()) {
				statement.executeUpdate(createTableArticle);
			}

			addArticleStmt = connection
					.prepareStatement("INSERT INTO Article (name, dmg, type, uniqueAbility_id) VALUES (?,?,?,?)");
			deleteAllArticlesStmt = connection
					.prepareStatement("DELETE FROM Article");
			getAllArticlesStmt = connection
					.prepareStatement("SELECT id, name, dmg, type, uniqueAbility_id FROM Article");
			editArticleStmt = connection
					.prepareStatement("UPDATE Article SET name = ?, dmg = ?, type = ? WHERE id = ?");
			deleteArticleStmt = connection
					.prepareStatement("DELETE FROM Article WHERE id = ?");			
			
			addUniqueAbilityStmt = connection
					.prepareStatement("INSERT INTO UniqueAbility (name, description) VALUES (?, ?)");
			deleteAllUniqueAbilitiesStmt = connection
					.prepareStatement("DELETE FROM UniqueAbility");
			getAllUniqueAbilitiesStmt = connection
					.prepareStatement("SELECT id, name, description FROM UniqueAbility");
			SelectId = connection
					.prepareStatement("SELECT id FROM UniqueAbility WHERE name=?;");


		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearArticles() {
		try {
			deleteAllArticlesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	void clearUniqueAbilitiy() {
		try {
			deleteAllUniqueAbilitiesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addArticle(Article article) {
		int count = 0;
		try {
			addArticleStmt.setString(1, article.getName());
			addArticleStmt.setInt(2, article.getDmg());
			addArticleStmt.setString(3, article.getType());
			addArticleStmt.setInt(4, article.getUniqueAbility_id());

			count = addArticleStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int addUniqueAbility(UniqueAbility uniqueAbility) {
		int count = 0;
		try {
			addUniqueAbilityStmt.setString(1, uniqueAbility.getName());
			addUniqueAbilityStmt.setString(2, uniqueAbility.getDescription());

			count = addUniqueAbilityStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<UniqueAbility> getAllUniqueAbility() {
		List<UniqueAbility> uniqueAbilities = new ArrayList<UniqueAbility>();

		try {
			ResultSet rs = getAllUniqueAbilitiesStmt.executeQuery();

			while (rs.next()) {
				UniqueAbility ua = new UniqueAbility();
				ua.setId(rs.getInt("id"));
				ua.setName(rs.getString("name"));
				ua.setDescription(rs.getString("description"));
				uniqueAbilities.add(ua);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return uniqueAbilities;
	}

	public int editArticle(int id, Article article) {
		int count = 0;
		try {
			editArticleStmt.setInt(4, id);
			editArticleStmt.setString(1, article.getName());
			editArticleStmt.setInt(2, article.getDmg());
			editArticleStmt.setString(3, article.getType());

			editArticleStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Article> getAllArticle() {
		List<Article> articles = new ArrayList<Article>();

		try {
			ResultSet rs = getAllArticlesStmt.executeQuery();

			while (rs.next()) {
				Article a = new Article();
				a.setId(rs.getInt("id"));
				a.setName(rs.getString("name"));
				a.setDmg(rs.getInt("dmg"));
				a.setType(rs.getString("type"));
				a.setUniqueAbility_id(rs.getInt("uniqueAbility_id"));
				articles.add(a);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return articles;
	}
	
	public int select_id_from_uniqueAbility(String name) {
		int output = -1;
		try {
			SelectId.setString(1, name);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			ResultSet rs = SelectId.executeQuery();
			while (rs.next()) {
				output = rs.getInt("id");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return output;
	}

}
