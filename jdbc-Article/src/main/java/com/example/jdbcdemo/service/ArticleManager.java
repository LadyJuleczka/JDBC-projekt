package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Article;
import com.example.jdbcdemo.domain.UniqueAbility;

public class ArticleManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableUniqueAbility = "CREATE TABLE "
			+ "UniqueAbility(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
			+ "name varchar(20), description varchar(80));";

	private String createTableArticle = "CREATE TABLE "
			+ "Article(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
			+ "name varchar(20), dmg int, type varchar (20), uniqueAbility_id int, "
			+ "FOREIGN KEY (uniqueAbility_id) REFERENCES UniqueAbility(id));";

	private PreparedStatement addArticleStmt;
	private PreparedStatement deleteAllArticlesStmt;
	private PreparedStatement getAllArticleStmt;
	private PreparedStatement editArticleStmt;
	private PreparedStatement deleteArticleStmt;
	private PreparedStatement deleteArticleOwnerStmt;

	private PreparedStatement addUniqueAbilityStmt;
	private PreparedStatement deleteAllUniqueAbilitiesStmt;
	private PreparedStatement getAllUniqueAbilitiesStmt;
	private PreparedStatement editUniqueAbilityStmt;
	private PreparedStatement SelectId;
	private PreparedStatement deleteUniqueAbilityStmt;

	private Statement statement;

	public ArticleManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs1 = connection.getMetaData().getTables(null, null,
					"UniqueAbility", null);
			if (!rs1.next()) {
				statement.executeUpdate(createTableUniqueAbility);
			}

			ResultSet rs2 = connection.getMetaData().getTables(null, null,
					"Article", null);

			if (!rs2.next()) {
				statement.executeUpdate(createTableArticle);
			}

			addUniqueAbilityStmt = connection
					.prepareStatement("INSERT INTO UniqueAbility (name, description) VALUES (?, ?)");
			deleteAllUniqueAbilitiesStmt = connection
					.prepareStatement("DELETE FROM UniqueAbility");
			getAllUniqueAbilitiesStmt = connection
					.prepareStatement("SELECT * FROM UniqueAbility");
			editUniqueAbilityStmt = connection
					.prepareStatement("UPDATE UniqueAbility SET name = ?, description = ? WHERE id = ?");
			deleteUniqueAbilityStmt = connection
					.prepareStatement("DELETE FROM UniqueAbility WHERE id = ?");
			deleteArticleOwnerStmt = connection
					.prepareStatement("DELETE FROM Article WHERE uniqueAbility_id = ?");
			addArticleStmt = connection
					.prepareStatement("INSERT INTO Article (name, dmg, type, uniqueAbility_id) VALUES (?,?,?,?)");
			deleteAllArticlesStmt = connection
					.prepareStatement("DELETE FROM Article");
			getAllArticleStmt = connection
					.prepareStatement("SELECT * FROM Article WHERE uniqueAbility_id = ?");

			// editArticleStmt = connection
			// .prepareStatement("UPDATE Article SET name = ?, dmg = ?, type = ? WHERE id = ?");
			// deleteArticleStmt = connection
			// .prepareStatement("DELETE FROM Article WHERE id = ?");
			// SelectId = connection
			// .prepareStatement("SELECT id FROM UniqueAbility WHERE name=?;");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearArticles() {
		try {
			deleteAllArticlesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	void clearUniqueAbilitiy() {
		try {
			this.clearArticles();
			deleteAllUniqueAbilitiesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addUniqueAbility(UniqueAbility uniqueAbility) {
		int count = 0;
		try {
			addUniqueAbilityStmt.setString(1, uniqueAbility.getName());
			addUniqueAbilityStmt.setString(2, uniqueAbility.getDescription());

			count = addUniqueAbilityStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int editUniqueAbility(int id, UniqueAbility uniqueAbility) {
		int count = 0;
		try {
			editUniqueAbilityStmt.setInt(3, id);
			editUniqueAbilityStmt.setString(1, uniqueAbility.getName());
			editUniqueAbilityStmt.setString(2, uniqueAbility.getDescription());

			editUniqueAbilityStmt.execute();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int addArticle(UniqueAbility uniqueAbility, Article article) {
		int count = 0;
		try {
			addArticleStmt.setString(1, article.getName());
			addArticleStmt.setInt(2, article.getDmg());
			addArticleStmt.setString(3, article.getType());
			addArticleStmt.setInt(4, article.getUniqueAbility_id());
			uniqueAbility.addArticle(article);

			addArticleStmt.execute();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Article> getAllArticles(int uni) {
		List<Article> article = new ArrayList<Article>();

		try {
			getAllArticleStmt.setInt(1, uni);
			ResultSet rs2 = getAllArticleStmt.executeQuery();
			while (rs2.next()) {
				Article ar = new Article();
				ar.setId(rs2.getInt("id"));
				ar.setName(rs2.getString("name"));
				ar.setDmg(rs2.getInt("dmg"));
				ar.setUniqueAbility_id(rs2.getInt("uniqueAbility_id"));
				article.add(ar);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return article;
	}

	public List<UniqueAbility> getAllUniqueAbility() {
		List<UniqueAbility> uniqueAbilities = new ArrayList<UniqueAbility>();

		try {
			ResultSet rs = getAllUniqueAbilitiesStmt.executeQuery();

			while (rs.next()) {
				UniqueAbility ua = new UniqueAbility();
				ua.setId(rs.getInt("id"));
				ua.setName(rs.getString("name"));
				ua.setDescription(rs.getString("description"));

				getAllArticleStmt.setInt(1, ua.getId());

				ResultSet rs2 = getAllArticleStmt.executeQuery();
				while (rs2.next()) {
					Article ar = new Article();
					ar.setId(rs2.getInt("id"));
					ar.setName(rs2.getString("name"));
					ar.setDmg(rs2.getInt("dmg"));
					ar.setUniqueAbility_id(rs2.getInt("uniqueAbility_id"));
					ua.addArticle(ar);
				}

				uniqueAbilities.add(ua);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return uniqueAbilities;
	}

	public int deleteUniqueAbility(UniqueAbility uni) {
		int count = 0;
		try {
			deleteArticleOwnerStmt.setInt(1, uni.getId());
			deleteUniqueAbilityStmt.setInt(1, uni.getId());
			deleteArticleOwnerStmt.execute();
			deleteUniqueAbilityStmt.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	//
	// public int editArticle(int id, Article article) {
	// int count = 0;
	// try {
	// editArticleStmt.setInt(4, id);
	// editArticleStmt.setString(1, article.getName());
	// editArticleStmt.setInt(2, article.getDmg());
	// editArticleStmt.setString(3, article.getType());
	//
	// editArticleStmt.executeUpdate();
	//
	// } catch (SQLException e) {
	// e.printStackTrace();
	// }
	// return count;
	// }
	//
	// public List<Article> getAllArticle() {
	// List<Article> articles = new ArrayList<Article>();
	//
	// try {
	// ResultSet rs = getAllArticlesStmt.executeQuery();
	//
	// while (rs.next()) {
	// Article a = new Article();
	// a.setId(rs.getInt("id"));
	// a.setName(rs.getString("name"));
	// a.setDmg(rs.getInt("dmg"));
	// a.setType(rs.getString("type"));
	// a.setUniqueAbility_id(rs.getInt("uniqueAbility_id"));
	// articles.add(a);
	// }
	//
	// } catch (SQLException e) {
	// e.printStackTrace();
	// }
	// return articles;
	// }
	//
	// public int select_id_from_uniqueAbility(String name) {
	// int output = -1;
	// try {
	// SelectId.setString(1, name);
	// } catch (SQLException e) {
	// e.printStackTrace();
	// }
	// try {
	// ResultSet rs = SelectId.executeQuery();
	// while (rs.next()) {
	// output = rs.getInt("id");
	// }
	// } catch (SQLException e) {
	// e.printStackTrace();
	// }
	// return output;
	// }

}
